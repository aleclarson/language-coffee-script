'scopeName': 'source.coffee'
'name': 'CoffeeScript'
'fileTypes': [
  'coffee'
  'Cakefile'
  'coffee.erb'
  'cson'
  '_coffee'
]
'firstLineMatch': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/)
    coffee
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      coffee
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      coffee
    (?=\\s|:|$)
  )
'''
'patterns': [
  {
    'match': '(new)\\s+(?:(?:(class)\\s+(\\w+(?:\\.\\w*)*)?)|(\\w+(?:\\.\\w*)*))'
    'name': 'meta.class.instance.constructor.coffee'
    'captures':
      '1':
        'name': 'keyword.operator.new.coffee'
      '2':
        'name': 'storage.type.class.coffee'
      '3':
        'name': 'entity.name.type.instance.coffee'
      '4':
        'name': 'entity.name.type.instance.coffee'
  }
  {
    'begin': '\'\'\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.coffee'
    'end': '\'\'\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.coffee'
    'name': 'string.quoted.single.heredoc.coffee'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.escape.backslash.coffee'
        'match': '(\\\\).'
        'name': 'constant.character.escape.backslash.coffee'
      }
    ]
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.coffee'
    'end': '"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.coffee'
    'name': 'string.quoted.double.heredoc.coffee'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.escape.backslash.coffee'
        'match': '(\\\\).'
        'name': 'constant.character.escape.backslash.coffee'
      }
      {
        'include': '#interpolated_coffee'
      }
    ]
  }
  {
    'match': '(`)(.*)(`)'
    'name': 'string.quoted.script.coffee'
    'captures':
      '1':
        'name': 'punctuation.definition.string.begin.coffee'
      '2':
        'name': 'source.js.embedded.coffee'
        'patterns': [
          {
            'include': 'source.js'
          }
        ]
      '3':
        'name': 'punctuation.definition.string.end.coffee'
  }
  {
    'begin': '(?<!#)###(?!#)'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.coffee'
    'end': '###'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.comment.coffee'
    'name': 'comment.block.coffee'
    'patterns': [
      {
        'match': '(?<=^|\\s)@\\w*(?=\\s)'
        'name': 'storage.type.annotation.coffee'
      }
    ]
  }
  {
    'begin': '#'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.coffee'
    'end': '$'
    'name': 'comment.line.number-sign.coffee'
  }
  {
    'begin': '///'
    'end': '(///)[gimuy]*'
    'name': 'string.regexp.multiline.coffee'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.coffee'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.coffee'
    'patterns': [
      {
        'include': '#heregexp'
      }
    ]
  }
  {
    'begin': '(?<![\\w$])(/)(?=(?![/*+?])(.+)(/)[gimuy]*(?!\\s*[\\w$/(]))'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.coffee'
    'end': '(/)[gimuy]*(?!\\s*[\\w$/(])'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.coffee'
    'name': 'string.regexp.coffee'
    'patterns': [
      {
        'include': 'source.js.regexp'
      }
    ]
  }
  {
    'match': '\\b(?<![\\.\\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|export|import|default|from|as|yield|async|await|(?<=for)\\s+own)(?!\\s*:)\\b'
    'name': 'keyword.control.coffee'
  }
  {
    'match': '\\b(?<![\\.\\$])(delete|instanceof|new|typeof)(?!\\s*:)\\b'
    'name': 'keyword.operator.$1.coffee'
  }
  {
    'match': '\\b(?<![\\.\\$])(case|function|var|void|with|const|let|enum|native|__hasProp|__extends|__slice|__bind|__indexOf|implements|interface|package|private|protected|public|static)(?!\\s*:)\\b'
    'name': 'keyword.reserved.coffee'
  }
  {
    # "a": -> ...
    # "a": (args) -> ...
    'begin': '''(?x)
      (?<=\\s|^)(?:((\')([^\']*?)(\'))|((")([^"]*?)(")))
      \\s*([:=])\\s*
      (?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)
    '''
    'beginCaptures':
      '1':
        'name': 'string.quoted.single.coffee'
      '2':
        'name': 'punctuation.definition.string.begin.coffee'
      '3':
        'name': 'entity.name.function.coffee'
      '4':
        'name': 'punctuation.definition.string.end.coffee'
      '5':
        'name': 'string.quoted.double.coffee'
      '6':
        'name': 'punctuation.definition.string.begin.coffee'
      '7':
        'name': 'entity.name.function.coffee'
      '8':
        'name': 'punctuation.definition.string.end.coffee'
      '9':
        'name': 'keyword.operator.assignment.coffee'
    'end': '[=-]>'
    'endCaptures':
      '0':
        'name': 'storage.type.function.coffee'
    'name': 'meta.function.coffee'
    'patterns': [
      {
        'include': '#function_params'
      }
    ]
  }
  {
    # a: -> ...
    # a: (args) -> ...
    # a = -> ...
    # a = (args) => ...
    'begin': '''(?x)
      (@?[a-zA-Z_$][\\w$]*)
      \\s*([:=])\\s*
      (?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)
    '''
    'beginCaptures':
      '1':
        'name': 'function.name.assignment.coffee'
      '2':
        'name': 'keyword.operator.assignment.coffee'
    'end': '[=-]>'
    'endCaptures':
      '0':
        'name': 'storage.type.function.coffee'
    'name': 'meta.function.coffee'
    'patterns': [
      {
        'include': '#function_params'
      }
    ]
  }
  {
    # (args) -> ...
    # -> ...
    'begin': '(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)'
    'end': '[=-]>'
    'endCaptures':
      '0':
        'name': 'storage.type.function.coffee'
    'name': 'meta.function.inline.coffee'
    'patterns': [
      {
        'include': '#function_params'
      }
    ]
  }
  {
    'comment': 'Object destructuring'
    'begin': '(?<=\\s|^)({)(?=[^\'"#]+?}[\\s\\]}]*=)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.destructuring.begin.bracket.curly.coffee'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.destructuring.end.bracket.curly.coffee'
    'name': 'meta.variable.assignment.destructured.object.coffee'
    'patterns': [
      {
        'include': '$self'
      }
      {
        'match': '[a-zA-Z$_]\\w*'
        'name': 'variable.assignment.coffee'
      }
    ]
  }
  {
    'comment': 'Array destructuring'
    'begin': '(?<=\\s|^)(\\[)(?=[^\'"#]+?\\][\\s\\]}]*=)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.destructuring.begin.bracket.square.coffee'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.destructuring.end.bracket.square.coffee'
    'name': 'meta.variable.assignment.destructured.array.coffee'
    'patterns': [
      {
        'include': '$self'
      }
      {
        'match': '[a-zA-Z$_]\\w*'
        'name': 'variable.assignment.coffee'
      }
    ]
  }
  {
    'comment': 'Anonymous class'
    'captures':
      '1':
        'name': 'storage.type.class.coffee'
      '2':
        'name': 'keyword.control.inheritance.coffee'
      '3':
        'name': 'entity.other.inherited-class.coffee'
    'match': '(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)'
    'name': 'meta.class.coffee'
  }
  {
    'comment': 'Named class'
    'captures':
      '1':
        'name': 'storage.type.class.coffee'
      '2':
        'name': 'entity.name.type.class.coffee'
      '3':
        'name': 'keyword.control.inheritance.coffee'
      '4':
        'name': 'entity.other.inherited-class.coffee'
    'match': '(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?'
    'name': 'meta.class.coffee'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#method_calls'
  }
  {
    'include': '#function_calls'
  }
  {
    'include': '#numbers'
  }
  {
    'include': '#objects'
  }
  {
    'include': '#properties'
  }
  {
    'match': '::'
    'name': 'keyword.operator.prototype.coffee'
  }
  {
    'match': '(?<!\\$)\\b[0-9]+[\\w$]*'
    'name': 'invalid.illegal.identifier.coffee'
  }
  {
    'match': ';'
    'name': 'punctuation.terminator.statement.coffee'
  }
  {
    'match': ','
    'name': 'punctuation.separator.delimiter.coffee'
  }
  {
    'begin': '{'
    'beginCaptures':
      '0':
        'name': 'meta.brace.curly.coffee'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'meta.brace.curly.coffee'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.array.begin.bracket.square.coffee'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.array.end.bracket.square.coffee'
    'patterns': [
      {
        'match': '(?<!\\.)\\.{3}' # ...
        'name': 'keyword.operator.slice.exclusive.coffee'
      }
      {
        'match': '(?<!\\.)\\.{2}' # ..
        'name': 'keyword.operator.slice.inclusive.coffee'
      }
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'meta.brace.round.coffee'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'meta.brace.round.coffee'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'include': '#instance_variable'
  }
  {
    'include': '#variable_name'
  }
  {
    'include': '#single_quoted_string'
  }
  {
    'include': '#double_quoted_string'
  }
]
'repository':
  'arguments':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.arguments.begin.bracket.round.coffee'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.arguments.end.bracket.round.coffee'
        'name': 'meta.arguments.coffee'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'begin': '(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|\'))'
        'end': '(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))'
        'name': 'meta.arguments.coffee'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'double_quoted_string':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.coffee'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.coffee'
        'name': 'string.quoted.double.coffee'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'punctuation.definition.escape.backslash.coffee'
            'match': '(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
            'name': 'constant.character.escape.backslash.coffee'
          }
          {
            'include': '#interpolated_coffee'
          }
        ]
      }
    ]
  'embedded_comment':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.coffee'
        'match': '(?<!\\\\)(#).*$\\n?'
        'name': 'comment.line.number-sign.coffee'
      }
    ]
  'function_calls':
    'patterns': [
      {
        # functionCall(arg1, "arg2", [...])
        'begin': '(@)?([\\w$]+)(?=\\()'
        'beginCaptures':
          '1':
            'name': 'variable.other.readwrite.instance.coffee'
          '2':
            'patterns': [
              {
                'include': '#function_names'
              }
            ]
        'end': '(?<=\\))'
        'name': 'meta.function-call.coffee'
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
      }
      {
        # functionCall arg1, "arg2", [...]
        'begin': '''(?x)
          (@)?([\\w$]+)
          \\s*
          (?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|\')))
        '''
        'beginCaptures':
          '1':
            'name': 'variable.other.readwrite.instance.coffee'
          '2':
            'patterns': [
              {
                'include': '#function_names'
              }
            ]
        'end': '(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))'
        'name': 'meta.function-call.coffee'
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
      }
    ]
  'function_names':
    'patterns': [
      {
        'match': "[a-zA-Z_$][\\w$]*"
        'name': 'entity.name.function.coffee'
      }
      {
        'match': '\\d[\\w$]*'
        'name': 'invalid.illegal.identifier.coffee'
      }
    ]
  'function_params':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.parameters.begin.bracket.round.coffee'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.parameters.end.bracket.round.coffee'
        'name': 'meta.parameters.coffee'
        'patterns': [
          {
            'match': '([a-zA-Z_$][\\w$]*)(\\.\\.\\.)?'
            'captures':
              '1':
                'name': 'variable.parameter.function.coffee'
              '2':
                'name': 'keyword.operator.splat.coffee'
          }
          {
            'match': '(@(?:[a-zA-Z_$][\\w$]*)?)(\\.\\.\\.)?'
            'captures':
              '1':
                'name': 'variable.parameter.function.readwrite.instance.coffee'
              '2':
                'name': 'keyword.operator.splat.coffee'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  'instance_variable':
    'patterns': [
      {
        'match': '(@)([a-zA-Z_\\$]\\w*)?'
        'name': 'variable.other.readwrite.instance.coffee'
      }
    ]
  'interpolated_coffee':
    'patterns': [
      {
        'begin': '\\#\\{'
        'captures':
          '0':
            'name': 'punctuation.section.embedded.coffee'
        'end': '\\}'
        'name': 'source.coffee.embedded.source'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(debugger)\\b'
        'name': 'keyword.debugger.coffee'
      }
      {
        'match': '\\b(Infinity)\\b'
        'name': 'constant.numeric.infinity.coffee'
      }
      {
        'match': '\\b(NaN)\\b'
        'name': 'constant.numeric.nan.coffee'
      }
      {
        'match': '\\b(undefined)\\b'
        'name': 'constant.undefined.coffee'
      }
      {
        'match': '\\b(?<!\\.|::)(true|on|yes)(?!\\s*[:=][^=])\\b'
        'name': 'constant.language.boolean.true.coffee'
      }
      {
        'match': '\\b(?<!\\.|::)(false|off|no)(?!\\s*[:=][^=])\\b'
        'name': 'constant.language.boolean.false.coffee'
      }
      {
        'match': '\\b(?<!\\.|::)null(?!\\s*[:=][^=])\\b'
        'name': 'constant.language.null.coffee'
      }
      {
        'match': '\\b(?<!\\.|::)extends(?!\\s*[:=])\\b'
        'name': 'variable.language.coffee'
      }
      {
        'match': '(?<!\\.)\\b(?<!\\$)(super|this|arguments)(?!\\s*[:=][^=]|\\$)\\b'
        'name': 'variable.language.$1.coffee'
      }
    ]
  'method_calls':
    'patterns': [
      {
        # .methodCall(arg1, "arg2", [...])
        'begin': '(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\()'
        'beginCaptures':
          '1':
            'name': 'punctuation.separator.method.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'patterns': [
              {
                'include': '#method_names'
              }
            ]
        'end': '(?<=\\))'
        'name': 'meta.method-call.coffee'
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
      }
      {
        # .methodCall arg1, "arg2", [...]
        'begin': '(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|\')))'
        'beginCaptures':
          '1':
            'name': 'punctuation.separator.method.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'patterns': [
              {
                'include': '#method_names'
              }
            ]
        'end': '(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))'
        'name': 'meta.method-call.coffee'
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
      }
    ]
  'method_names':
    'patterns': [
      {
        'match': "[a-zA-Z_$][\\w$]*"
        'name': 'entity.name.function.coffee'
      }
      {
        'match': '\\d[\\w$]*'
        'name': 'invalid.illegal.identifier.coffee'
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)'
        'name': 'constant.numeric.hex.coffee'
      }
      {
        'match': '\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)'
        'name': 'constant.numeric.binary.coffee'
      }
      {
        'match': '\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)'
        'name': 'constant.numeric.octal.coffee'
      }
      {
        'match': '''(?x)
          (?<!\\$)(?:
            (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3
            (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3
            (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3
            (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3
            (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1
            (?:\\b[0-9]+(?=\\.{2,3}))|                  # 1 followed by a slice
            (?:\\b[0-9]+(\\.)\\B)|                      # 1.
            (?:\\B(\\.)[0-9]+\\b)|                      # .1
            (?:\\b[0-9]+\\b(?!\\.))                     # 1
          )(?!\\$)
        '''
        'captures':
          '0':
            'name': 'constant.numeric.decimal.coffee'
          '1':
            'name': 'punctuation.separator.decimal.period.coffee'
          '2':
            'name': 'punctuation.separator.decimal.period.coffee'
          '3':
            'name': 'punctuation.separator.decimal.period.coffee'
          '4':
            'name': 'punctuation.separator.decimal.period.coffee'
          '5':
            'name': 'punctuation.separator.decimal.period.coffee'
          '6':
            'name': 'punctuation.separator.decimal.period.coffee'
      }
    ]
  'objects':
    'patterns': [
      {
        # OBJ in OBJ.prop, OBJ.methodCall()
        'match': '''(?x)
          [A-Z][A-Z0-9_$]*
          (?=\\s*\\??(\\.\\s*[a-zA-Z_$][\\w$]*|::))
        '''
        'name': 'constant.other.object.coffee'
      }
      {
        # obj in obj.prop, obj.methodCall()
        'match': '''(?x)
          [a-zA-Z_$][\\w$]*
          (?=\\s*\\??(\\.\\s*[a-zA-Z_$][\\w$]*|::))
        '''
        'name': 'variable.other.object.coffee'
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '(?:([a-zA-Z$_][\\.\\w$]*)?\\s+|(?<![\\w$]))(and=|or=)'
        'captures':
          '1':
            'name': 'variable.assignment.coffee'
          '2':
            'name': 'keyword.operator.assignment.compound.coffee'
      }
      {
        'match': '([a-zA-Z$_][\\.\\w$]*)?\\s*(%=|\\+=|-=|\\*=|&&=|\\|\\|=|\\?=|(?<!\\()/=)'
        'captures':
          '1':
            'name': 'variable.assignment.coffee'
          '2':
            'name': 'keyword.operator.assignment.compound.coffee'
      }
      {
        'match': '([a-zA-Z$_][\\.\\w$]*)?\\s*(&=|\\^=|<<=|>>=|>>>=|\\|=)'
        'captures':
          '1':
            'name': 'variable.assignment.coffee'
          '2':
            'name': 'keyword.operator.assignment.compound.bitwise.coffee'
      }
      {
        'match': '<<|>>>|>>'
        'name': 'keyword.operator.bitwise.shift.coffee'
      }
      {
        'match': '!=|<=|>=|==|<|>'
        'name': 'keyword.operator.comparison.coffee'
      }
      {
        'match': '&&|!|\\|\\|'
        'name': 'keyword.operator.logical.coffee'
      }
      {
        'match': '&|\\||\\^|~'
        'name': 'keyword.operator.bitwise.coffee'
      }
      {
        'match': '([a-zA-Z$_][\\w$]*)?\\s*(=|:(?!:))(?![>=])'
        'captures':
          '1':
            'name': 'variable.assignment.coffee'
          '2':
            'name': 'keyword.operator.assignment.coffee'
      }
      {
        'match': '--'
        'name': 'keyword.operator.decrement.coffee'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.increment.coffee'
      }
      {
        'match': '\\.\\.\\.'
        'name': 'keyword.operator.splat.coffee'
      }
      {
        'match': '\\?'
        'name': 'keyword.operator.existential.coffee'
      }
      {
        'match': '-(?=\\.?[0-9])'
        'name': 'keyword.operator.numeric.coffee'
      }
      {
        'match': '%|\\*|/|-|\\+'
        'name': 'keyword.operator.coffee'
      }
      {
        'match': '''(?x)
          \\b(?<![\\.\\$])
          (?:
            (and|or|not) # logical
            |
            (is|isnt) # comparison
          )
          (?!\\s*:)\\b
        '''
        'captures':
          '1':
            'name': 'keyword.operator.logical.coffee'
          '2':
            'name': 'keyword.operator.comparison.coffee'
      }
    ]
  'properties':
    'patterns': [
      {
        # PROP1 in obj.PROP1.prop2, func().PROP1.prop2
        'match': '''(?x)
          (?:(\\.)|(::))\\s*
          ([A-Z][A-Z0-9_$]*+)
          (?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))
        '''
        'captures':
          '1':
            'name': 'punctuation.separator.property.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'name': 'constant.other.object.property.coffee'
      }
      {
        # prop1 in obj.prop1.prop2, func().prop1.prop2
        'match': '''(?x)
          (?:(\\.)|(::))\\s*
          ([a-zA-Z_$][\\w$]*+)
          (?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))
        '''
        'captures':
          '1':
            'name': 'punctuation.separator.property.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'name': 'variable.other.object.property.coffee'
      }
      {
        # PROP in obj.PROP, func().PROP
        'match': '''(?x)
          (?:(\\.)|(::))\\s*
          ([A-Z][A-Z0-9_$]*\\b)
          (?!\\s*=(?![=>]))
        '''
        'captures':
          '1':
            'name': 'punctuation.separator.property.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'name': 'constant.other.property.coffee'
      }
      {
        # prop in obj.prop, func().prop
        'match': '''(?x)
          (?:(\\.)|(::))\\s*
          ([a-zA-Z_$][\\w$]*\\b)
          (?!\\s*=(?![=>]))
        '''
        'captures':
          '1':
            'name': 'punctuation.separator.property.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'name': 'variable.other.property.coffee'
      }
      {
        # 123illegal in obj.123illegal, func().123illegal
        'match': '(?:(\\.)|(::))\\s*([0-9][\\w$]*)'
        'captures':
          '1':
            'name': 'punctuation.separator.property.period.coffee'
          '2':
            'name': 'keyword.operator.prototype.coffee'
          '3':
            'name': 'invalid.illegal.identifier.coffee'
      }
    ]
  'single_quoted_string':
    'patterns': [
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.coffee'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.coffee'
        'name': 'string.quoted.single.coffee'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'punctuation.definition.escape.backslash.coffee'
            'match': '(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
            'name': 'constant.character.escape.backslash.coffee'
          }
        ]
      }
    ]
  'variable_name':
    'patterns': [
      {
        'match': '[a-zA-Z_\\$][\\w$]*'
        'name': 'variable.other.readwrite.coffee'
      }
    ]
  'regex-character-class':
    'patterns': [
      {
        'match': '\\\\[wWsSdD]|\\.'
        'name': 'constant.character.character-class.regexp'
      }
      {
        'match': '\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})'
        'name': 'constant.character.numeric.regexp'
      }
      {
        'match': '\\\\c[A-Z]'
        'name': 'constant.character.control.regexp'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]
  'heregexp':
    'patterns': [
      {
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        'match': '\\\\[1-9]\\d*'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
      {
        'begin': '(\\()((\\?=)|(\\?!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '3':
            'name': 'meta.assertion.look-ahead.regexp'
          '4':
            'name': 'meta.assertion.negative-look-ahead.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.assertion.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '\\((\\?:)?'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
        'name': 'constant.other.character-class.set.regexp'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.character.numeric.regexp'
              '2':
                'name': 'constant.character.control.regexp'
              '3':
                'name': 'constant.character.escape.backslash.regexp'
              '4':
                'name': 'constant.character.numeric.regexp'
              '5':
                'name': 'constant.character.control.regexp'
              '6':
                'name': 'constant.character.escape.backslash.regexp'
            'match': '(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class'
          }
        ]
      }
      {
        'include': '#regex-character-class'
      }
      {
        'include': '#interpolated_coffee'
      }
      {
        'include': '#embedded_comment'
      }
    ]
